"""
Django settings for ccstore project.

Generated by 'django-admin startproject' using Django 1.11.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import dj_database_url
from datetime import timedelta
from decimal import Decimal
from decouple import config, Csv
from oscar import get_core_apps, OSCAR_MAIN_TEMPLATE_DIR
from oscar.defaults import *  # noqa: F401,F403


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'x$o$)44!pfz^$yfd7zwe)1#@w-qw3jj*&kn0sl-!yg_9g+us67'
SECRET_KEY = config('SECRET_KEY', default=SECRET_KEY)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(str), default='*')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'channels',
    'widget_tweaks',
    'cc',
    'qrcode',
    'apps.core',
] + get_core_apps(['apps.checkout'])

SITE_ID = config('SITE_ID', default=1, cast=int)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oscar.apps.basket.middleware.BasketMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'oscar.apps.customer.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'ccstore.urls'
WSGI_APPLICATION = 'ccstore.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DATABASE_URL = config('DATABASE_URL', default=None)
DATABASE_CONN_MAX_AGE = config('DATABASE_CONN_MAX_AGE', default=600, cast=int)

if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(conn_max_age=DATABASE_CONN_MAX_AGE)

# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization

LANGUAGE_CODE = 'en'
TIME_ZONE = config('TIME_ZONE', default='Europe/Berlin')
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)

STATIC_URL = config('STATIC_URL', default='/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Media uploads

MEDIA_URL = config('MEDIA_URL', default='/media/')  # For local development only.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            OSCAR_MAIN_TEMPLATE_DIR
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.i18n',
                'django.contrib.messages.context_processors.messages',
                'oscar.apps.search.context_processors.search_form',
                'oscar.apps.promotions.context_processors.promotions',
                'oscar.apps.checkout.context_processors.checkout',
                'oscar.apps.customer.notifications.context_processors.notifications',
                'oscar.core.context_processors.metadata',
                'apps.core.context_processors.default'
            ],
        },
    },
]

# Search Backend - Haystack

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    },
}

# Celery settings

BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Channels

CHANNEL_REDIS_HOST = config('CHANNEL_REDIS_HOST', default='127.0.0.1')
CHANNEL_REDIS_PORT = config('CHANNEL_REDIS_PORT', default=6379, cast=int)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "asgi_redis.RedisChannelLayer",
        "ROUTING": "ccstore.routing.channel_routing",
        "CONFIG": {
            "hosts": [
                (CHANNEL_REDIS_HOST, CHANNEL_REDIS_PORT),
            ],
        },
    },
}

# Sessions

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Caching

DJANGO_REDIS_CACHE_URL = config('DJANGO_REDIS_CACHE_URL', default='redis://127.0.0.1:6379/1')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": DJANGO_REDIS_CACHE_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Oscar

OSCAR_SHOP_NAME = config('OSCAR_SHOP_NAME', default='CCStore')
OSCAR_DEFAULT_CURRENCY = config('OSCAR_DEFAULT_CURRENCY', 'EUR')
OSCAR_ALLOW_ANON_CHECKOUT = False  # Force to False for now.
OSCAR_INITIAL_ORDER_STATUS = 'Pending'
OSCAR_INITIAL_LINE_STATUS = 'Pending'
OSCAR_ORDER_STATUS_PIPELINE = {
    'Pending': ('Being processed', 'Cancelled',),
    'Being processed': ('Processed', 'Cancelled',),
    'Cancelled': (),
}

# Django CC

CC_CONFIRMATIONS = config('CC_CONFIRMATIONS', default=2, cast=int)
CC_ADDRESS_QUEUE = config('CC_ADDRESS_QUEUE', default=20, cast=int)
CC_ALLOW_NEGATIVE_BALANCE = Decimal('0.001')
CC_ACCOUNT = config('CC_ACCOUNT', default='')  # Set to your LTC wallet account, if required.
CC_ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# CCStore

CCSTORE_DEFAULT_COIN = config('CCSTORE_DEFAULT_COIN', default='LTC')
if CCSTORE_DEFAULT_COIN == 'BCH':
    raise NotImplementedError('BCH is not supported.')

CCSTORE_DEFAULT_CURRENCY = config('CCSTORE_DEFAULT_CURRENCY', default=OSCAR_DEFAULT_CURRENCY)
CCSTORE_TICKER_COINS = [CCSTORE_DEFAULT_COIN]  # Let's think about multicoin later.
CCSTORE_TICKER_CURRENCIES = ['EUR', 'USD', 'GBP', 'CNY']  # Let's use default hardcoded values for now.
CCSTORE_PAYMENT_EXPIRE = config('CCSTORE_PAYMENT_EXPIRE', default=60 * 10, cast=int)  # 10 minutes

# Lightning

LND_RPCHOST = config('LND_RPCHOST', default='localhost:10002')

# Celerybeat schedule.

CELERYBEAT_SCHEDULE = {
    'withdraw-transactions': {
        'task': 'cc.tasks.process_withdraw_transactions',
        'schedule': timedelta(seconds=4),
        'args': [CCSTORE_DEFAULT_COIN]
    },
    'deposite-transactions': {
        'task': 'cc.tasks.query_transactions',
        'schedule': timedelta(seconds=6),
        'args': [CCSTORE_DEFAULT_COIN]
    },
    'update-ticker': {
        'task': 'apps.core.tasks.update_ticker',
        'schedule': timedelta(seconds=30),
        'args': []
    },
    'refill-addresses-queue': {
        'task': 'cc.tasks.refill_addresses_queue',
        'schedule': timedelta(seconds=15),
        'args': []
    }
}

# E-Mail settings
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'


# Local settings

try:
    from .settings_local import *  # noqa: F401,F403
except ImportError:
    pass
